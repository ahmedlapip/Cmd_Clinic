package OOP;import java.util.ArrayList;import java.util.Scanner;public class Patient extends User {    protected String patientHistory, age, gender, bloodType;    protected float weight = 0;    protected float height = 0;    private final Scanner sc = new Scanner(System.in);    // Constructors    public Patient() {}    public Patient(String userName, String password) {        super(userName, password);    }    public Patient(String firstName, String lastName, String username, String email, String password, String mobileNumber) {        super(firstName, lastName, username, email, password, mobileNumber);    }    public Patient(String firstName, String lastName, String username, String email, String password, String mobileNumber,                   String age, String gender, String bloodType, String patientHistory, float weight, float height) {        super(firstName, lastName, username, email, password, mobileNumber);        this.age = age;        this.gender = gender;        this.weight = weight;        this.height = height;        this.bloodType = bloodType;        this.patientHistory = patientHistory;    }    // Update Patient Information    public void updateInfo() {        System.out.println("What do you want to change? (Email, Mobile Number, Weight, Height)");        String choice = sc.nextLine().trim();        switch (choice.toLowerCase()) {            case "email" -> {                System.out.print("Enter new email: ");                setEmail(sc.nextLine());            }            case "mobile number" -> {                System.out.print("Enter new mobile number: ");                setMobileNumber(sc.nextLine());            }            case "weight" -> {                System.out.print("Enter new weight: ");                setWeight(sc.nextFloat());                sc.nextLine(); // Clear newline character            }            case "height" -> {                System.out.print("Enter new height: ");                setHeight(sc.nextFloat());                sc.nextLine(); // Clear newline character            }            default -> System.out.println("Invalid choice. Please try again.");        }    }    // Reserve Appointment    public void reserveAppointment(ArrayList<Appointment> appointmentList) {        System.out.print("Enter date (YYYY-MM-DD): ");        String date = sc.nextLine();        System.out.print("Enter time (HH:MM): ");        String time = sc.nextLine();        for (Appointment appointment : appointmentList) {            if (appointment.getDate().equals(date) && appointment.getTime().equals(time)) {                System.out.println("An appointment on " + date + " at " + time + " already exists.");                return;            }            else {            Appointment newAppointment = new Appointment(getName(), getMobileNumber(), date, time);            appointmentList.add(newAppointment);            System.out.println("Appointment reserved for " + date + " at " + time);            return;            }        }    }    // Cancel Appointment    public void cancelReservation(ArrayList<Appointment> appointmentList) {        System.out.print("Enter date (YYYY-MM-DD): ");        String date = sc.nextLine();        System.out.print("Enter time (HH:MM): ");        String time = sc.nextLine();        for (Appointment appointment : appointmentList) {            if (appointment.getDate().equals(date) && appointment.getTime().equals(time) &&appointment.getPhoneNumber().equals(getMobileNumber())) {                appointmentList.remove(appointment);                System.out.println("Appointment on " + date + " at " + time + " has been canceled.");                return;            }        }        System.out.println("No appointment found for " + date + " at " + time + ".");    }    // Check Appointment Prices    public void checkPrices( ArrayList<Appointment> appointmentList) {        int count = appointmentList.size();        if (count > 0) {            System.out.println("You have " + count + " appointment(s).");            System.out.println("Total price: " + count * Doctor.PRICE + " EGP");        } else {            System.out.println("No appointments found.");        }    }    // Search for Doctor    public void searchForDoctor(ArrayList<Doctor> doctorList) {        System.out.print("Enter doctor name or mobile number: ");        String search = sc.nextLine();        for (Doctor doctor : doctorList) {            if (doctor.getName().equalsIgnoreCase(search) || doctor.getMobileNumber().equals(search)) {                System.out.println("Doctor found: " + doctor.getName());                return;            }        }        System.out.println("No doctor found.");    }    public static Patient fromString(String line) {        String[] fields = line.split(",");        if (fields.length != 12) { // Adjust based on the number of fields            throw new IllegalArgumentException("Invalid data format for Patient.");        }        return new Patient(                fields[0],  // First Name                fields[1],  // Last Name                fields[2],  // Username                fields[3],  // Email                fields[4],  // Password                fields[5],  // Mobile Number                fields[6],  // Age                fields[7],  // Gender                fields[8],  // Blood Type                fields[9],  // Patient History                Float.parseFloat(fields[10]),  // Weight                Float.parseFloat(fields[11])   // Height        );    }    // Display Available Appointments (To be implemented)    public void showAvailableAppointments() {        System.out.println("This feature is not yet implemented.");    }    // Getter and Setter Methods    public String getAge() {        return age;    }    public void setAge(String age) {        this.age = age;    }    public String getBloodType() {        return bloodType;    }    public void setBloodType(String bloodType) {        this.bloodType = bloodType;    }    public float getHeight() {        return height;    }    public void setHeight(float height) {        this.height = height;    }    public float getWeight() {        return weight;    }    public void setWeight(float weight) {        this.weight = weight;    }    // Interactive Menu for Patients    public void patientMenu(ArrayList<Doctor> doctorList,ArrayList<Appointment> appointmentList) {        System.out.println("""            Choose an option:            1 -> Reserve Appointment            2 -> Cancel Reservation            3 -> Check Prices            4 -> Search for Doctor            5 -> Show Available Appointments        """);        int choice = sc.nextInt();        sc.nextLine(); // Clear newline character        switch (choice) {            case 1 -> reserveAppointment(appointmentList);            case 2 -> cancelReservation(appointmentList);            case 3 -> checkPrices(appointmentList);            case 4 -> searchForDoctor(doctorList);            case 5 -> showAvailableAppointments();            default -> System.out.println("Invalid choice. Please try again.");        }    }}